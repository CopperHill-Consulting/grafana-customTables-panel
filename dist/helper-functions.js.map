{"version":3,"sources":["../src/helper-functions.js"],"names":["RGX_CELL_PLACEHOLDER","RGX_OLD_VAR_WORKAROUND","RGX_ESCAPED_CHARS","toCSV","rows","opt_options","Object","headers","concat","nullString","hasOwnProperty","map","row","cell","toString","prototype","call","test","replace","join","parseRegExp","strPattern","parts","exec","RegExp","_","escapeRegExp","pseudoCssToJSON","strLess","openCount","closeCount","match","ruleName","styleName","styleValue","JSON","stringify","trim","parse","e","Error","getCellValue","valToMod","isForLink","cellsByColName","ruleType","rgx","ctrl","varsByName","unitFormat","unitFormatDecimals","unitFormatString","matches","timeVars","timeSrv","time","value","Date","includes","match0","isTime","opt_timePart","matchesKey","isColOrVar","name","isRaw","isEscape","isParam","paramName","encodeURIComponent","from","to","result","Set","has","length","v","undefined","getHtmlText","div","html","innerHTML","textContent","document","createElement","module","exports"],"mappings":";;AAAA;;;;;;;;;;AAEA,IAAMA,oBAAoB,GAAG,yJAA7B;AACA,IAAMC,sBAAsB,GAAG,kDAA/B;AACA,IAAMC,iBAAiB,GAAG,QAA1B;AAEA;;;;;;;;;;;;;AAYA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,WAArB,EAAkC;AAChCA,EAAAA,WAAW,GAAGC,MAAM,CAACD,WAAD,CAApB;;AACA,MAAIA,WAAW,CAACE,OAAhB,EAAyB;AACvBH,IAAAA,IAAI,GAAG,CAACC,WAAW,CAACE,OAAb,EAAsBC,MAAtB,CAA6BJ,IAA7B,CAAP;AACD;;AACD,MAAIK,UAAU,GAAGJ,WAAW,CAACK,cAAZ,CAA2B,YAA3B,IAA2CL,WAAW,CAACI,UAAvD,GAAoE,QAArF;AACA,SAAOL,IAAI,CACRO,GADI,CACA,UAAUC,GAAV,EAAe;AAClB,WAAOA,GAAG,CAACD,GAAJ,CAAQ,UAAUE,IAAV,EAAgB;AAC7BA,MAAAA,IAAI,GAAGA,IAAI,IAAI,IAAR,GACH,eAAe,OAAOA,IAAI,CAACC,QAA3B,GACED,IAAI,GAAG,EADT,GAEEP,MAAM,CAACS,SAAP,CAAiBD,QAAjB,CAA0BE,IAA1B,CAA+BH,IAA/B,CAHC,GAIHJ,UAJJ;AAKA,aAAO,WAAWQ,IAAX,CAAgBJ,IAAhB,IAAwB,MAAOA,IAAD,CAAOK,OAAP,CAAe,IAAf,EAAqB,IAArB,CAAN,GAAmC,GAA3D,GAAiEL,IAAxE;AACD,KAPM,EAOJM,IAPI,CAOC,GAPD,CAAP;AAQD,GAVI,EAWJA,IAXI,CAWC,IAXD,CAAP;AAYD;;AAED,SAASC,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,MAAIC,KAAK,GAAG,kBAAkBC,IAAlB,CAAuBF,UAAvB,CAAZ;AACA,SAAOC,KAAK,GAAG,IAAIE,MAAJ,CAAWF,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,CAAD,CAA1B,CAAH,GAAoC,IAAIE,MAAJ,CAAW,MAAMC,CAAC,CAACC,YAAF,CAAeL,UAAf,CAAN,GAAmC,GAA9C,EAAmD,GAAnD,CAAhD;AACD;;AAED,SAASM,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;AAEAF,EAAAA,OAAO,GAAGA,OAAO,CACdV,OADO,CACC,gBADD,EACmB,EADnB,EAEPA,OAFO,CAGN,wCAHM,EAIN,UAAUa,KAAV,EAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,UAAtC,EAAkD;AAChD,QAAIF,QAAJ,EAAc;AACZH,MAAAA,SAAS;AACT,aAAOM,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,EAAf,IAAkC,IAAzC;AACD;;AACD,QAAIJ,SAAJ,EAAe;AACb,aAAOE,IAAI,CAACC,SAAL,CAAeH,SAAS,CAACI,IAAV,EAAf,IAAmC,GAAnC,GAAyCF,IAAI,CAACC,SAAL,CAAeF,UAAU,CAACG,IAAX,EAAf,CAAzC,GAA6E,GAApF;AACD;;AACDP,IAAAA,UAAU;AACV,WAAO,IAAP;AACD,GAdK,EAgBPZ,OAhBO,CAgBC,aAhBD,EAgBgB,IAhBhB,CAAV;;AAkBA,MAAI;AACF,WAAOiB,IAAI,CAACC,SAAL,CAAeD,IAAI,CAACG,KAAL,CAAW,MAAMV,OAAN,GAAgB,GAA3B,CAAf,EAAgD,IAAhD,EAAsD,CAAtD,CAAP;AACD,GAFD,CAGA,OAAOW,CAAP,EAAU;AACR,UAAM,IAAIC,KAAJ,CACJX,SAAS,KAAKC,UAAd,GACI,mCAAmCD,SAAS,GAAGC,UAAZ,GAAyB,MAAzB,GAAkC,MAArE,IAA+E,aADnF,GAEI,0CAHA,CAAN;AAKD;AACF;;AAED,SAASW,YAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,QAAwJ;AAAA,MAA3G9B,IAA2G,QAA3GA,IAA2G;AAAA,MAArG+B,cAAqG,QAArGA,cAAqG;AAAA,MAArFC,QAAqF,QAArFA,QAAqF;AAAA,MAA3EC,GAA2E,QAA3EA,GAA2E;AAAA,MAAtEC,IAAsE,QAAtEA,IAAsE;AAAA,MAAhEC,UAAgE,QAAhEA,UAAgE;AAAA,MAApDC,UAAoD,QAApDA,UAAoD;AAAA,MAAxCC,kBAAwC,QAAxCA,kBAAwC;AAAA,MAApBC,gBAAoB,QAApBA,gBAAoB;AACtJ,MAAIC,OAAO,GAAGP,QAAQ,KAAK,QAAb,GACVhC,IAAI,IAAI,IAAR,GACEiC,GAAG,CAACvB,IAAJ,CAASV,IAAI,GAAG,EAAhB,CADF,GAEE;AAAE,SAAK;AAAP,GAHQ,GAIV;AAAE,SAAKA;AAAP,GAJJ;AAMA,MAAIwC,QAAQ,GAAGN,IAAI,CAACO,OAAL,CAAaC,IAA5B;AAEAH,EAAAA,OAAO,CAACI,KAAR,GACE,YAAYvC,IAAZ,CAAiBgC,UAAjB,IACI,kCAAeA,UAAf,EAA2B,IAAIQ,IAAJ,CAAS5C,IAAT,CAA3B,EAA2CsC,gBAA3C,CADJ,GAEIC,OAAO,CAACvC,IAAR,GAAgB,CAAC,CAAC,MAAD,EAAS,IAAT,EAAe,KAAK,CAApB,EAAuB6C,QAAvB,CAAgCT,UAAhC,CAAD,IAAgD,aAAa,OAAOpC,IAArE,GACb,kCAAeoC,UAAf,EAA2BpC,IAA3B,EAAiCqC,kBAAjC,EAAqD,IAArD,CADa,GAEbrC,IALR;AAOA,SAAO6B,QAAQ,CAACxB,OAAT,CAAiBjB,sBAAjB,EAAyC,MAAzC,EAAiDiB,OAAjD,CACLlB,oBADK,EAEL,UAAU2D,MAAV,EAAkBC,MAAlB,EAA0BC,YAA1B,EAAwCC,UAAxC,EAAoDC,UAApD,EAAgEC,IAAhE,EAAsEC,KAAtE,EAA6EC,QAA7E,EAAuFC,OAAvF,EAAgGC,SAAhG,EAA2G;AACzG,QAAIR,MAAJ,EAAY;AACV,aAAO,CAACC,YAAY,IAAI,IAAhB,GAAuB,UAAUQ,kBAAkB,CAAChB,QAAQ,CAACiB,IAAV,CAAnD,GAAqE,EAAtE,KACFT,YAAY,GAAG,EAAH,GAAQ,GADlB,KAEFA,YAAY,IAAI,MAAhB,GAAyB,QAAQQ,kBAAkB,CAAChB,QAAQ,CAACkB,EAAV,CAAnD,GAAmE,EAFjE,CAAP;AAGD;;AAEDN,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAEtB,SAAS,IAAIuB,QAAf,CAAjB;AACAF,IAAAA,IAAI,GAAGF,UAAU,IAAKE,IAAI,IAAIA,IAAI,CAAC9C,OAAL,CAAahB,iBAAb,EAAgC,IAAhC,CAA9B;;AAEA,QAAIsE,MAAM,sBAAO,IAAIC,GAAJ,CACfX,UAAU,GACNrC,CAAC,CAACiD,GAAF,CAAMtB,OAAN,EAAeU,UAAf,IAA6B,CAACV,OAAO,CAACU,UAAD,CAAR,CAA7B,GAAqD,EAD/C,GAENC,UAAU,KAAK,KAAf,GACEtC,CAAC,CAACiD,GAAF,CAAM9B,cAAN,EAAsBoB,IAAtB,IAA8B,CAACpB,cAAc,CAACoB,IAAD,CAAf,CAA9B,GAAuD,EADzD,GAEEvC,CAAC,CAACiD,GAAF,CAAM1B,UAAN,EAAkBgB,IAAlB,IAA0BhB,UAAU,CAACgB,IAAD,CAApC,GAA6C,EALpC,CAAP,CAAV;;AAQA,WAAOQ,MAAM,CAACG,MAAP,GAAgB,CAAhB,GACHhB,MADG,GAEHM,KAAK,GACHO,MAAM,CAACrD,IAAP,CAAY,GAAZ,CADG,GAEHgD,OAAO,GACLK,MAAM,CAAC7D,GAAP,CAAW,UAAAiE,CAAC;AAAA,aAAIP,kBAAkB,CAACD,SAAS,IAAIS,SAAb,GAAyBd,UAAU,KAAK,KAAf,iBAA8BC,IAA9B,IAAuCA,IAAhE,GAAuEI,SAAxE,CAAlB,GAAuG,GAAvG,GAA6GC,kBAAkB,CAACO,CAAD,CAAnI;AAAA,KAAZ,EAAoJzD,IAApJ,CAAyJ,GAAzJ,CADK,GAELkD,kBAAkB,CAACG,MAAM,CAACrD,IAAP,CAAY,GAAZ,CAAD,CAN1B;AAOD,GA3BI,CAAP;AA6BD;;AAED,IAAM2D,WAAW,GAAI,UAAAC,GAAG;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAKD,GAAG,CAACE,SAAJ,GAAgBD,IAAhB,EAAsBD,GAAG,CAACG,WAA/B;AAAA,GAAR;AAAA,CAAJ,CAAyDC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAzD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAAEnF,EAAAA,KAAK,EAALA,KAAF;AAASiB,EAAAA,WAAW,EAAXA,WAAT;AAAsBO,EAAAA,eAAe,EAAfA,eAAtB;AAAuCc,EAAAA,YAAY,EAAZA,YAAvC;AAAqDqC,EAAAA,WAAW,EAAXA;AAArD,CAAjB","sourcesContent":["import { getValueFormat } from './format-values';\n\nconst RGX_CELL_PLACEHOLDER = /\\$\\{(time)(?:-(to|from))?\\}|\\$\\{(?:(value|cell|0|[1-9]\\d*)|(col|var):((?:[^\\}:\\\\]*|\\\\.)+))(?::(?:(raw)|(escape)|(param)(?::((?:[^\\}:\\\\]*|\\\\.)+))?))?\\}/g;\nconst RGX_OLD_VAR_WORKAROUND = /([\\?&])var-(\\$\\{var:(?:[^\\}:\\\\]*|\\\\.)+:param\\})/g;\nconst RGX_ESCAPED_CHARS = /\\\\(.)/g;\n\n/**\n * Converts an array of arrays of values to a CSV string.\n * @param rows {Array<Array>}\n *     An array of arrays of values that should be converted to a CSV string.\n * @param opt_options {Object=}\n *     Optional.  If this contains a `nullString` property the value will be used\n *     as the string that will appear whenever `null` or `undefined` is found.\n *     If this contains a `headers` property the value should be an array\n *     indicating the headers to be included as the first row.\n * @returns {string}\n *     The CSV version of `rows` with any specified options.\n */\nfunction toCSV(rows, opt_options) {\n  opt_options = Object(opt_options);\n  if (opt_options.headers) {\n    rows = [opt_options.headers].concat(rows);\n  }\n  var nullString = opt_options.hasOwnProperty('nullString') ? opt_options.nullString : '(NULL)';\n  return rows\n    .map(function (row) {\n      return row.map(function (cell) {\n        cell = cell != null\n          ? 'function' === typeof cell.toString\n            ? cell + \"\"\n            : Object.prototype.toString.call(cell)\n          : nullString;\n        return /[\",\\n\\r]/.test(cell) ? '\"' + (cell).replace(/\"/g, '\"\"') + '\"' : cell;\n      }).join(',');\n    })\n    .join('\\n');\n}\n\nfunction parseRegExp(strPattern) {\n  let parts = /^\\/(.+)\\/(\\w*)$/.exec(strPattern);\n  return parts ? new RegExp(parts[1], parts[2]) : new RegExp('^' + _.escapeRegExp(strPattern) + '$', 'i');\n}\n\nfunction pseudoCssToJSON(strLess) {\n  var openCount = 0;\n  var closeCount = 0;\n\n  strLess = strLess\n    .replace(/\\/\\*[^]*?\\*\\//g, '')\n    .replace(\n      /([^\\{\\};]+)\\{|([^:\\{\\}]+):([^;]+);|\\}/g,\n      function (match, ruleName, styleName, styleValue) {\n        if (ruleName) {\n          openCount++;\n          return JSON.stringify(ruleName.trim()) + \":{\";\n        }\n        if (styleName) {\n          return JSON.stringify(styleName.trim()) + \":\" + JSON.stringify(styleValue.trim()) + \",\";\n        }\n        closeCount++;\n        return \"},\";\n      }\n    )\n    .replace(/,\\s*(\\}|$)/g, '$1');\n\n  try {\n    return JSON.stringify(JSON.parse(\"{\" + strLess + \"}\"), null, 2);\n  }\n  catch (e) {\n    throw new Error(\n      openCount !== closeCount\n        ? \"Pseudo-CSS contains too many \" + (openCount > closeCount ? \"open\" : \"clos\") + \"ing braces.\"\n        : \"Pseudo-CSS couldn't be parsed correctly.\"\n    );\n  }\n}\n\nfunction getCellValue(valToMod, isForLink, { cell, cellsByColName, ruleType, rgx, ctrl, varsByName, unitFormat, unitFormatDecimals, unitFormatString }) {\n  let matches = ruleType === 'FILTER'\n    ? cell != null\n      ? rgx.exec(cell + '')\n      : { '0': 'null' }\n    : { '0': cell };\n\n  let timeVars = ctrl.timeSrv.time;\n\n  matches.value = \n    /^dateTime/.test(unitFormat)\n      ? getValueFormat(unitFormat)(new Date(cell), unitFormatString)\n      : matches.cell = (!['none', null, void 0].includes(unitFormat) && 'number' === typeof cell)\n        ? getValueFormat(unitFormat)(cell, unitFormatDecimals, null)\n        : cell;\n\n  return valToMod.replace(RGX_OLD_VAR_WORKAROUND, '$1$2').replace(\n    RGX_CELL_PLACEHOLDER,\n    function (match0, isTime, opt_timePart, matchesKey, isColOrVar, name, isRaw, isEscape, isParam, paramName) {\n      if (isTime) {\n        return (opt_timePart != 'to' ? 'from=' + encodeURIComponent(timeVars.from) : '')\n          + (opt_timePart ? '' : '&')\n          + (opt_timePart != 'from' ? 'to=' + encodeURIComponent(timeVars.to) : '');\n      }\n\n      isRaw = isRaw || !(isForLink || isEscape);\n      name = matchesKey || (name && name.replace(RGX_ESCAPED_CHARS, '$1'));\n      \n      let result = [...new Set(\n        matchesKey\n          ? _.has(matches, matchesKey) ? [matches[matchesKey]] : []\n          : isColOrVar === 'col'\n            ? _.has(cellsByColName, name) ? [cellsByColName[name]] : []\n            : _.has(varsByName, name) ? varsByName[name] : []\n      )];\n\n      return result.length < 1\n        ? match0\n        : isRaw\n          ? result.join(',')\n          : isParam\n            ? result.map(v => encodeURIComponent(paramName == undefined ? isColOrVar === 'var' ? `var-${name}` : name : paramName) + '=' + encodeURIComponent(v)).join('&')\n            : encodeURIComponent(result.join(','));\n    }\n  );\n}\n\nconst getHtmlText = (div => html => (div.innerHTML = html, div.textContent))(document.createElement('div'));\n\nmodule.exports = { toCSV, parseRegExp, pseudoCssToJSON, getCellValue, getHtmlText };"],"file":"helper-functions.js"}